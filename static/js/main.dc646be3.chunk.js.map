{"version":3,"sources":["sound/smashSound.mp3","CircleItem.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","CircleItem","onImageDivClick","circleId","props","circle","id","onCircleClick","imageDivClassName","this","visibility","className","onClick","React","Component","App","state","circleItems","circleItemsCount","counter","counterStep","randomId","isMute","audio","Audio","sound","getCircles","newItems","i","push","setState","getRandomId","newId","Math","floor","random","getVisibleCircle","newVisibleCircle","map","el","playSound","currentTime","play","newCounter","onMuteClick","onResetClick","setInterval","circles","muteButtonClassName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc646be3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/smashSound.f7c82cf8.mp3\";","import React from 'react';\r\n\r\nclass CircleItem extends React.Component {\r\n\r\n\tonImageDivClick = () => {\r\n\t\tlet circleId = this.props.circle.id;\r\n\t\tthis.props.onCircleClick(circleId);\r\n\t};\r\n\r\n\trender () {\r\n\r\n\t\tlet imageDivClassName = this.props.circle.visibility ? \"circleImage\" : \"circleImage circleImageHidden\";\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"circleItem\">\r\n\t\t\t\t<div className={imageDivClassName} onClick={this.onImageDivClick}/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default CircleItem;\r\n","import React from 'react';\n\nimport './App.css';\nimport sound from \"./sound/smashSound.mp3\";\nimport CircleItem from \"./CircleItem\";\n\nclass App extends React.Component {\n\n\tcomponentDidMount () {\n\t\tthis.getCircles();\n\t\tsetInterval(() => {\n\t\t\tthis.getRandomId();\n\t\t\tthis.getVisibleCircle();\n\t\t}, 1000);\n\t};\n\n\tstate = {\n\t\tcircleItems: [],\n\t\tcircleItemsCount: 9,\n\t\tcounter: 0,\n\t\tcounterStep: 1,\n\t\trandomId: 0,\n\t\tisMute: false\n\t};\n\taudio = new Audio(sound)\n\n\tgetCircles = () => {\n\t\tlet newItems = [];\n\t\tfor (let i = 0; i < this.state.circleItemsCount; i++) {\n\t\t\tnewItems.push({id: i, visibility: false})\n\t\t}\n\t\tthis.setState({\n\t\t\tcircleItems: newItems\n\t\t})\n\t};\n\n\tgetRandomId = () => {\n\t\tlet newId = Math.floor(Math.random() * this.state.circleItemsCount);\n\t\tif (newId === this.state.randomId) {\n\t\t\tnewId = Math.floor(Math.random() * this.state.circleItemsCount);\n\t\t\tthis.setState({\n\t\t\t\trandomId: newId\n\t\t\t});\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\trandomId: newId\n\t\t\t});\n\t\t}\n\t}\n\n\tgetVisibleCircle = () => {\n\t\tlet newVisibleCircle = this.state.circleItems.map(el => {\n\t\t\tif (el.id === this.state.randomId) {\n\t\t\t\treturn {...el, ...{visibility: true}}\n\t\t\t} else {\n\t\t\t\treturn {...el, ...{visibility: false}}\n\t\t\t}\n\t\t});\n\t\tthis.setState({\n\t\t\tcircleItems: newVisibleCircle\n\t\t})\n\t}\n\n\tplaySound = () => {\n\t\tthis.audio.currentTime = 0;\n\t\tthis.audio.play();\n\t}\n\n\tonCircleClick = (circleId) => {\n\t\tlet newCounter = this.state.counter + this.state.counterStep;\n\t\tthis.state.circleItems.map(el => {\n\t\t\tif (el.id === circleId && el.visibility) {\n\t\t\t\treturn (\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcounter: newCounter\n\t\t\t\t\t}))\n\t\t\t}\n\t\t\treturn el;\n\t\t});\n\t\tif ( !this.state.isMute) {\n\t\t\tthis.playSound();\n\t\t}\n\t};\n\n\tonMuteClick = () => {\n\t\tlet isMute = this.state.isMute;\n\t\tif (isMute) {\n\t\t\tthis.setState({\n\t\t\t\tisMute: false\n\t\t\t})\n\t\t} else {\n\t\t\tthis.setState({\n\t\t\t\tisMute: true\n\t\t\t})\n\t\t}\n\t}\n\n\tonResetClick = () => {\n\t\tthis.setState({\n\t\t\tcounter: 0\n\t\t})\n\t};\n\n\trender () {\n\n\t\tlet circles = this.state.circleItems.map(el => <CircleItem circle={el} onCircleClick={this.onCircleClick}/>);\n\t\tlet muteButtonClassName = this.state.isMute ? \"muteButton\" : \"unMuteButton\";\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"gameTitle\">\n\t\t\t\t\tBeat a Mole!\n\t\t\t\t</div>\n\t\t\t\t<div className=\"uiWrapper\">\n\t\t\t\t\t<div className=\"circleItemsWrapper\">\n\t\t\t\t\t\t{circles}\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"bottomCircles\">\n\t\t\t\t\t\t<button className={muteButtonClassName} onClick={this.onMuteClick}/>\n\t\t\t\t\t\t<div className=\"counter\">\n\t\t\t\t\t\t\t{this.state.counter}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<button className=\"resetButton\" onClick={this.onResetClick}>reset</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}